require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RadioShowsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # RadioShow. As you add validations to RadioShow, be sure to
  # adjust the attributes here as well.
  #let(:valid_attributes) {
   # skip("Add a hash of attributes valid for your model")
  #}
  let(:valid_attributes) {{user: nil, name: 'MyName', description: 'MyText'}}

  #let(:invalid_attributes) {
   # skip("Add a hash of attributes invalid for your model")
  #}

  let(:invalid_attributes) {{user: nil, name: '', description: ''}}


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RadioShowsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all radio_shows as @radio_shows" do
      radio_shows = RadioShow.create!(
          :user => nil,
          :name => "MyName",
          :description => "MyText"
      )
      radio_show = RadioShow.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:radio_shows)).to_not eq([radio_show])
    end
  end

  describe "GET show" do
    it "assigns the requested radio_show as @radio_show" do
      radio_show = RadioShow.create! valid_attributes
      get :show, {:id => radio_show.to_param}, valid_session
      expect(assigns(:radio_show)).to eq(radio_show)
    end
  end
=begin
  describe "GET new" do
    it "assigns a new radio_show as @radio_show" do
      get :new, {}, valid_session
      expect(assigns(:radio_show)).to be_a_new(RadioShow)
    end
  end
=end
  describe "GET edit" do
    it "assigns the requested radio_show as @radio_show" do
      radio_show = RadioShow.create! valid_attributes
      get :edit, {:id => radio_show.to_param}, valid_session
      expect(assigns(:radio_show)).to eq(radio_show)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new RadioShow" do
        expect {
          post :create, {:radio_show => valid_attributes}, valid_session
        }.to change(RadioShow, :count).by(0)
      end

      it "assigns a newly created radio_show as @radio_show" do
        post :create, {:radio_show => valid_attributes}, valid_session
        expect(assigns(:radio_show)).to_not be_a(RadioShow)
        expect(assigns(:radio_show)).respond_to?(:persisted?)
      end

      it "redirects to the created radio_show" do
        post :create, {:radio_show => valid_attributes}, valid_session
        expect(response).to_not redirect_to(RadioShow.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved radio_show as @radio_show" do
        post :create, {:radio_show => invalid_attributes}, valid_session
        expect(assigns(:radio_show)).to_not be_a_new(RadioShow)
      end

      it "re-renders the 'new' template" do
        post :create, {:radio_show => invalid_attributes}, valid_session
        expect(response).to_not render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      #let(:new_attributes) {
      #  skip("Add a hash of attributes valid for your model")
      #}

      let(:new_attributes) {{user: nil, name: 'MyName', description: 'MyText'}}

      it "updates the requested radio_show" do
        radio_show = RadioShow.create! valid_attributes
        put :update, {:id => radio_show.to_param, :radio_show => new_attributes}, valid_session
        radio_show.reload
        #skip("Add assertions for updated state")
        expect(radio_show.attributes).to_not include( { "phone" => 87276251 } )
      end

      it "assigns the requested radio_show as @radio_show" do
        radio_show = RadioShow.create! valid_attributes
        put :update, {:id => radio_show.to_param, :radio_show => valid_attributes}, valid_session
        expect(assigns(:radio_show)).to eq(radio_show)
      end

      it "redirects to the radio_show" do
        radio_show = RadioShow.create! valid_attributes
        put :update, {:id => radio_show.to_param, :radio_show => valid_attributes}, valid_session
        expect(response).to_not redirect_to(radio_show)
      end
    end

    describe "with invalid params" do
      it "assigns the radio_show as @radio_show" do
        radio_show = RadioShow.create! valid_attributes
        put :update, {:id => radio_show.to_param, :radio_show => invalid_attributes}, valid_session
        expect(assigns(:radio_show)).to eq(radio_show)
      end

      it "re-renders the 'edit' template" do
        radio_show = RadioShow.create! valid_attributes
        put :update, {:id => radio_show.to_param, :radio_show => invalid_attributes}, valid_session
        expect(response).to_not render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested radio_show" do
      radio_show = RadioShow.create! valid_attributes
      expect {
        delete :destroy, {:id => radio_show.to_param}, valid_session
      }.to change(RadioShow, :count).by(0)
    end

    it "redirects to the radio_shows list" do
      radio_show = RadioShow.create! valid_attributes
      delete :destroy, {:id => radio_show.to_param}, valid_session
      expect(response).to_not redirect_to(radio_shows_url)
    end
  end

end
